[{"sha": "9fc707e70335044090d5885a9c85ef5fdacdf120", "time": "2022-11-13T18:16:12Z", "changed_files": ["libcontainer/process_linux.go"], "title": "Fixed init state error variable\n\nInit State Error message was using the err variable instead of uerr, which has been fixed now.\nThe error message should not show \"nil\" now.\n\nSigned-off-by: Vipul Newaskar <vipulnewaskar7@gmail.com>"}, {"sha": "783f9ffeeb16ea078a7d1894743a3ade4c5ef6e5", "time": "2022-11-03T22:54:46Z", "changed_files": ["checkpoint.go"], "title": "runc checkpoint: destroy only on success\n\nIf checkpointing has failed, the container is kept running. We do not\nwant to, and we can't remove it in such case.\n\nDo not try to remove the container if there's an error from\ncheckpointing.\n\nThis avoids an unclear error message from destroy() saying \"container\nstill running\" or \"container paused\".\n\nWhile at it, avoid using defer since it does not make a lot of sense\nhere.\n\nFixes: #3577\nReported-by: gosoon <tianfeiyu0@gmail.com>\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "4a8750d93aabe2b0e76f2336c256c8aa2b47943e", "time": "2022-10-03T02:07:08Z", "changed_files": ["tests/integration/helpers.bash", "tests/integration/update.bats"], "title": "tests/int: add a \"update cpuset cpus range via v2 unified map\" test\n\nAdd a test case for an issue fixed by the previous commit.\nThe env should has more than 8 core CPU to meet the test requirement.\n\nSigned-off-by: Chengen, Du <chengen.du@canonical.com>"}, {"sha": "77cae9addc0c7c9ef52513b4e46b2e6485e4e469", "time": "2022-09-26T06:28:18Z", "changed_files": ["libcontainer/cgroups/systemd/cpuset.go", "libcontainer/cgroups/systemd/cpuset_test.go"], "title": "cgroups: cpuset: fix byte order while parsing cpuset range to bits\n\nRunc parses cpuset range to bits in the case of cgroup v2 + systemd as cgroup driver.\nThe byte order representation differs from systemd expectation, which will set\ndifferent cpuset range in systemd transient unit if the length of parsed byte array exceeds one.\n\n\t# cat config.json\n\t...\n\t\"resources\": {\n\t\t...\n\t\t\"cpu\": {\n\t\t\t\"cpus\": \"10-23\"\n\t\t}\n\t},\n\t...\n\t# runc --systemd-cgroup run test\n\t# cat /run/systemd/transient/runc-test.scope.d/50-AllowedCPUs.conf\n\t# This is a drop-in unit file extension, created via \"systemctl set-property\"\n\t# or an equivalent operation. Do not edit.\n\t[Scope]\n\tAllowedCPUs=0-7 10-15\n\nThe cpuset.cpus in cgroup will also be set to wrong value after reloading systemd manager configuration.\n\n\t# systemctl daemon-reload\n\t# cat /sys/fs/cgroup/system.slice/runc-test.scope/cpuset.cpus\n\t0-7,10-15\n\nSigned-off-by: seyeongkim <seyeong.kim@canonical.com>\nSigned-off-by: Chengen, Du <chengen.du@canonical.com>"}, {"sha": "462e719cae227a990ed793241062a8d2d6145332", "time": "2022-10-03T18:16:53Z", "changed_files": ["libcontainer/cgroups/devices/systemd.go"], "title": "Fixes inability to use /dev/null when inside a container\n\nThis is a forward port of https://github.com/opencontainers/runc/pull/3620\n\nThe original code depended on the origin filesystem to have\n/dev/{block,char} populated. This is done by udev normally and while is\nvery common non-containerized systemd installs, it's very easy to start\nsystemd in a container created by runc itself and not have\n/dev/{block,char} populated. When this occurs, the following error\noutput is observed:\n\n$ docker run hello-world\ndocker: Error response from daemon: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error reopening /dev/null inside container: open /dev/null: operation not permitted: unknown.\n\n/dev/null can't be opened because it was not added to the\ndeviceAllowList, as there was no /dev/char directory. The change here\nutilizes the fact that when sysfs in in use, there is a\n/sys/dev/{block,char} that is kernel maintained that we can check.\n\nSigned-off-by: Evan Phoenix <evan@phx.io>"}, {"sha": "0ffb49dba041087931427f4b6eddbfded2aa7d7d", "time": "2022-09-23T00:37:50Z", "changed_files": ["tests/integration/helpers.bash"], "title": "tests/int: suppress bogus error\n\nThe situation when /sys/fs/cgroup/unified is not present normal and\nshould not result in anything on stderr. Suppress it.\n\nFixes: cc15b887a00069b\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "26dc55ef1a56ea0279492a58c52636b549796510", "time": "2022-08-30T23:45:58Z", "changed_files": ["libcontainer/seccomp/patchbpf/enosys_linux.go", "tests/integration/seccomp.bats"], "title": "seccomp: fix flag test to actually check the value\n\nAdd a debug print of seccomp flags value, so the test can check\nthose (without using something like strace, that is).\n\nAmend the flags setting test with the numeric values expected, and the\nlogic to check those.\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "c7dc8b1fedc67c65b12d51fd98a27b547c4f3b93", "time": "2022-08-29T22:35:35Z", "changed_files": ["libcontainer/seccomp/patchbpf/enosys_linux.go", "libcontainer/seccomp/seccomp_linux.go"], "title": "libct/seccomp/patchbpf: support SPEC_ALLOW\n\nCommit 58ea21daefea8e3447db added support for seccomp flags such as\nSPEC_ALLOW, but it does not work as expected, because since commit\n7a8d7162f9d72f20d83ea we do not use libseccomp-golang's Load(), but\nhandle flags separately in patchbfp.\n\nThis fixes setting SPEC_ALLOW flag.\n\nAdd a comment to not forget to amend filterFlags when adding new flags.\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "58b1374f0ad98cc9390adc43dc22ddbb4f84d72e", "time": "2022-08-11T00:09:23Z", "changed_files": ["libcontainer/cgroups/devices/systemd.go", "tests/integration/dev.bats"], "title": "Fix failed exec after systemctl daemon-reload\n\nA regression reported for runc v1.1.3 says that \"runc exec -t\" fails\nafter doing \"systemctl daemon-reload\":\n\n> exec failed: unable to start container process: open /dev/pts/0: operation not permitted: unknown\n\nApparently, with commit 7219387eb7db69b we are no longer adding\n\"DeviceAllow=char-pts rwm\" rule (because os.Stat(\"char-pts\") returns\nENOENT).\n\nThe bug can only be seen after \"systemctl daemon-reload\" because runc\nalso applies the same rules manually (by writing to devices.allow for\ncgroup v1), and apparently reloading systemd leads to re-applying the\nrules that systemd has (thus removing the char-pts access).\n\nThe fix is to do os.Stat only for \"/dev\" paths.\n\nAlso, emit a warning that the path was skipped. Since the original idea\nwas to emit less warnings, demote the level to debug.\n\nNote this also fixes the issue of not adding \"m\" permission for block-*\nand char-* devices.\n\nA test case is added, which reliably fails before the fix\non both cgroup v1 and v2.\n\nFixes: https://github.com/opencontainers/runc/issues/3551\nFixes: 7219387eb7db69b4dae740c9d37d973d9a735801\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "df9e32bc6abd5dffe469fb294865321ebed3bd17", "time": "2022-08-17T22:43:16Z", "changed_files": [".codespellrc", "tests/integration/cgroup_delegation.bats"], "title": "ci: fix for codespell 2.2\n\nRecently released codespell 2.2 adds some more false positives,\nsuch as:\n\n\t./Makefile:78: ro ==> to, row, rob, rod, roe, rot\n\t./Makefile:88: ro ==> to, row, rob, rod, roe, rot\n\t./notify_socket.go:51: ro ==> to, row, rob, rod, roe, rot\n\t./LICENSE:128: complies ==> compiles\n\t./go.sum:59: BU ==> BY\n\t./types/features/features.go:17: ro ==> to, row, rob, rod, roe, rot\n\t./libcontainer/rootfs_linux.go:52: ro ==> to, row, rob, rod, roe, rot\n\t./libcontainer/rootfs_linux.go:166: ro ==> to, row, rob, rod, roe, rot\n\t....\n\t./tests/integration/cgroup_delegation.bats:38: inh ==> in\n\t...\n\nTo fix:\n - exclude go.sum;\n - add ro and complies to the list of ignored words;\n - s/inh/inherit in cgroup_delegation.bats.\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "45cc290f0297bda1b0e13962ca40e42ad861ec18", "time": "2022-08-03T22:10:25Z", "changed_files": ["libcontainer/cgroups/devices/ebpf_linux.go", "libcontainer/cgroups/utils.go", "libcontainer/configs/validate/validator.go", "libcontainer/specconv/spec_linux.go", "libcontainer/sync.go", "libcontainer/user/user.go"], "title": "libct: fixes for godoc 1.19\n\nSince Go 1.19, godoc recognizes lists, code blocks, headings etc. It\nalso reformats the sources making it more apparent that these features\nare used.\n\nFix a few places where it misinterpreted the formatting (such as\nindented vs unindented), and format the result using the gofumpt\nfrom HEAD, which already incorporates gofmt 1.19 changes.\n\nSome more fixes (and enhancements) might be required.\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "4fd4af5b1c6f0a03f36276afb74d42968c3de265", "time": "2022-07-27T23:20:02Z", "changed_files": ["libcontainer/integration/checkpoint_test.go", "tests/integration/helpers.bash"], "title": "CI: workaround CentOS Stream 9 criu issue\n\nOlder criu builds fail to work properly on CentOS Stream 9 due to\nchanges in glibc's rseq.\n\nSkip criu tests if an older criu version is found.\n\nFixes: https://github.com/opencontainers/runc/issues/3532\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "e119db7a23c773ca94b84a9f0086d1e5a12890f4", "time": "2022-07-04T08:03:31Z", "changed_files": ["tests/integration/seccomp.bats"], "title": "tests: enable seccomp default action tests on arm\n\nSigned-off-by: Shengjing Zhu <zhsj@debian.org>"}, {"sha": "957d97bcf43f41beef9670fe22ec78ccb5c5c101", "time": "2022-06-30T19:44:46Z", "changed_files": ["libcontainer/standard_init_linux.go", "libcontainer/system/linux.go"], "title": "Fix error from runc run on noexec fs\n\nWhen starting a new container, and the very last step of executing of a\nuser process fails (last lines of (*linuxStandardInit).Init), it is too\nlate to print a proper error since both the log pipe and the init pipe\nare closed.\n\nThis is partially mitigated by using exec.LookPath() which is supposed\nto say whether we will be able to execute or not. Alas, it fails to do\nso when the binary to be executed resides on a filesystem mounted with\nnoexec flag.\n\nA workaround would be to use access(2) with X_OK flag. Alas, it is not\nworking when runc itself is a setuid (or setgid) binary. In this case,\nfaccessat2(2) with AT_EACCESS can be used, but it is only available\nsince Linux v5.8.\n\nSo, use faccessat2(2) with AT_EACCESS if available. If not, fall back to\naccess(2) for non-setuid runc, and do nothing for setuid runc (as there\nis nothing we can do). Note that this check if in addition to whatever\nexec.LookPath does.\n\nFixes https://github.com/opencontainers/runc/issues/3520\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "66625701105c6b38260fa4bbe465e0615135d018", "time": "2022-06-16T23:31:42Z", "changed_files": ["libcontainer/factory_linux.go"], "title": "libct: fix staticcheck warning\n\nA new version of staticcheck (included into golangci-lint 1.46.2) gives\nthis new warning:\n\n> libcontainer/factory_linux.go:230:59: SA9008: e refers to the result of a failed type assertion and is a zero value, not the value that was being type-asserted (staticcheck)\n> \t\t\t\terr = fmt.Errorf(\"panic from initialization: %v, %s\", e, debug.Stack())\n> \t\t\t\t                                                      ^\n> libcontainer/factory_linux.go:226:7: SA9008(related information): this is the variable being read (staticcheck)\n> \t\t\tif e, ok := e.(error); ok {\n> \t\t\t   ^\n\nApparently, this is indeed a bug. Fix by using a different name for a\nnew variable, so we can access the old one under \"else\".\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "d370e3c04660201e72ba6968342ce964c31a2d7f", "time": "2022-06-15T00:19:10Z", "changed_files": ["libcontainer/rootfs_linux.go", "tests/integration/userns.bats"], "title": "libct: fix mounting via wrong proc fd\n\nDue to a bug in commit 9c444070ec7, when the user and mount namespaces\nare used, and the bind mount is followed by the cgroup mount in the\nspec, the cgroup is mounted using the bind mount's mount fd.\n\nThis can be reproduced with podman 4.1 (when configured to use runc):\n\n$ podman run --uidmap 0:100:10000 quay.io/libpod/testimage:20210610 mount\nError: /home/kir/git/runc/runc: runc create failed: unable to start container process: error during container init: error mounting \"cgroup\" to rootfs at \"/sys/fs/cgroup\": mount /proc/self/fd/11:/sys/fs/cgroup/systemd (via /proc/self/fd/12), flags: 0x20502f: operation not permitted: OCI permission denied\n\nor manually with the spec mounts containing something like this:\n\n    {\n      \"destination\": \"/etc/resolv.conf\",\n      \"type\": \"bind\",\n      \"source\": \"/userdata/resolv.conf\",\n      \"options\": [\n        \"bind\"\n      ]\n    },\n    {\n      \"destination\": \"/sys/fs/cgroup\",\n      \"type\": \"cgroup\",\n      \"source\": \"cgroup\",\n      \"options\": [\n        \"rprivate\",\n        \"nosuid\",\n        \"noexec\",\n        \"nodev\",\n        \"relatime\",\n        \"ro\"\n      ]\n    }\n\nThe issue was not found earlier since it requires using userns, and even then\nmount fd is ignored by mountToRootfs, except for bind mounts, and all the bind\nmounts have mountfd set, except for the case of cgroup v1's /sys/fs/cgroup\nwhich is internally transformed into a bunch of bind mounts.\n\nThis is a minimal fix for the issue, suitable for backporting.\n\nA test case is added which reproduces the issue without the fix applied.\n\nFixes: 9c444070ec7 (\"Open bind mount sources from the host userns\")\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "343951a22b58c38feb044a5cea501dae92f8540e", "time": "2022-06-02T02:07:00Z", "changed_files": ["libcontainer/cgroups/devices/systemd.go"], "title": "cgroups: systemd: skip adding device paths that don't exist\n\nsystemd emits very loud warnings when the path specified doesn't exist\n(which can be the case for some of our default rules). We don't need the\nruleset we give systemd to be completely accurate (we discard some kinds\nof wildcard rules anyway) so we can safely skip adding these.\n\nSigned-off-by: Aleksa Sarai <cyphar@cyphar.com>"}, {"sha": "e1d04cdfebd16057a10f251ad6a5a5df2e700a1b", "time": "2022-05-24T17:50:18Z", "changed_files": ["script/seccomp.sh"], "title": "script/seccomp.sh: check tarball sha256\n\nAdd checking of downloaded tarball checksum.\n\nIn case it doesn't match the hardcoded value, the error is like this:\n\n\tlibseccomp-2.5.4.tar.gz: FAILED\n\tsha256sum: WARNING: 1 computed checksum did NOT match\n\nIn case the checksum for a particular version is not specified in the\nscript, the error will look like this:\n\n\t./script/seccomp.sh: line 29: SECCOMP_SHA256[${ver}]: unbound variable\n\nIn case the the hardcoded value in the file is of wrong format/length,\nwe'll get:\n\n\tsha256sum: 'standard input': no properly formatted SHA256 checksum lines found\n\nIn any of these cases, the script aborts (due to set -e).\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "be6488a5a9a62088176d8220356b1d2650f301df", "time": "2022-05-20T00:39:41Z", "changed_files": ["CHANGELOG.md", "libcontainer/seccomp/patchbpf/enosys_linux.go", "libcontainer/seccomp/patchbpf/enosys_linux_test.go"], "title": "seccomp: enosys: always return -ENOSYS for setup(2) on s390(x)\n\nOn s390x, syscalls above 255 are multiplexed using the (now otherwise\nunused) setup(2) syscall (syscall number 0). If the kernel supports the\nsyscall then it will correctly translate the syscall number such that\nseccomp will correctly detect it -- however, for unknown syscalls the\nsyscall number remains unchanged. This can be verified by running the\nfollowing program under strace:\n\n\tint main(void)\n\t{\n\t\tscmp_filter_ctx ctx = seccomp_init(SCMP_ACT_TRAP);\n\t\tseccomp_load(ctx);\n\n\t\treturn syscall(439, AT_FDCWD, \"asdf\", X_OK, 0);\n\t}\n\nWhich will then die with the following signal (on pre-5.8 kernels):\n\n\t--- SIGSYS {si_signo=SIGSYS, si_code=SYS_SECCOMP,\n\t            si_call_addr=0x3ffb3006c22, si_syscall=__NR_setup,\n\t            si_arch=AUDIT_ARCH_S390X} ---\n\n(Note that the si_syscall is __NR_setup, not __NR_faccessat2.)\n\nAs a result, the -ENOSYS handling we had previously did not work\ncompletely correctly on s390x because any syscall not supported by the\nkernel would be treated as syscall number 0 rather than the actual\nsyscall number.\n\nAlways returning -ENOSYS will not cause any issues because in all of the\ncases where this multiplexing occurs, seccomp will see the remapped\nsyscall number -- and no userspace program will call setup(2)\nintentionally (the syscall has not existed in Linux for decades and was\noriginally a hack used early in Linux init prior to spawning pid1 -- so\nyou will get -ENOSYS from the kernel anyway).\n\nSigned-off-by: Aleksa Sarai <cyphar@cyphar.com>"}, {"sha": "47e09976a3159a8e2bf6160e7e0aedcfeadb5cfe", "time": "2022-04-09T00:14:41Z", "changed_files": ["libcontainer/cgroups/devices/devicefilter.go", "libcontainer/cgroups/devices/devicefilter_test.go", "libcontainer/cgroups/devices/devices_emulator.go"], "title": "libct/cg/dev: privatize some functions\n\nThese are only used from inside the package, and we don't want them to\nbe public.\n\nThe only two methods left are Enable and Disable.\n\nWhile at it, fix or suppress found lint-extra warnings.\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "ab5c60d02fcd9a4b7e870bcd631c3673e5b7dd2a", "time": "2022-04-01T00:51:11Z", "changed_files": ["Makefile"], "title": "Makefile: fix GO_BUILDMODE setting\n\n1. Set to empty value by default.\n\n2. Assume Linux (remove GOOS check, since we do not support other OSes).\n\n3. Instead of using a \"not-supported\" list, use a \"supported\" list\n   (as Go release notes usually say which platforms are supported).\n   As of today, -buildmode=pie is supported for:\n\n * linux/386, linux/amd64, linux/arm, linux/arm64, and linux/ppc64le\n   (since Go 1.6, see https://tip.golang.org/doc/go1.6#compiler)\n\n * linux/s390x (since Go 1.7, which adds the initial port)\n\n * linux/riscv64 (since Go 1.16, see\n   https://tip.golang.org/doc/go1.16#riscv)\n\n   NOTE this does not mean we support these architectures; it is merely\n   a way to see if -buildmode=pie can be used.\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "009e627cb02beeda55275dc4cdebc3e1bcf1eb7a", "time": "2022-05-11T22:03:32Z", "changed_files": ["Vagrantfile.fedora"], "title": "Vagrantfile.fedora: fix build wrt new git\n\nWith the updated git in Fedora 35, we can't build it via sudo:\n\n\tssh default 'sudo -i make -C /vagrant localunittest'\n\tmake: Entering directory '/vagrant'\n\tfatal: unsafe repository ('/vagrant' is owned by someone else)\n\tTo add an exception for this directory, call:\n\n\t\tgit config --global --add safe.directory /vagrant\n\tgo build -trimpath \"-buildmode=pie\"  -tags \"seccomp\" -ldflags \"-X main.gitCommit= -X main.version=1.1.0+dev \" -o runc .\n\terror obtaining VCS status: exit status 128\n\t\tUse -buildvcs=false to disable VCS stamping.\n\tmake: Leaving directory '/vagrant'\n\nThis commit should fix this.\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "4d3e52f207fce34119a51c79247fb6bf455754a7", "time": "2022-05-06T20:45:31Z", "changed_files": ["tests/integration/helpers.bash"], "title": "tests/int: fix a bad typo\n\nAs a result, cgroup v1 only tests are being skipped.\n\nFixes: a2123baf63fd\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "29a56b5206a3fc7b2f5fe4b43c09c8ba09b25495", "time": "2022-05-03T11:01:18Z", "changed_files": ["libcontainer/seccomp/patchbpf/enosys_linux_test.go", "libcontainer/seccomp/seccomp_linux.go"], "title": "fix deprecated ActKill\n\nSigned-off-by: CrazyMax <crazy-max@users.noreply.github.com>"}, {"sha": "9c710564fdaaad81f00783ab8e00cbba42f4674a", "time": "2022-04-22T02:36:49Z", "changed_files": ["go.mod", "go.sum", "vendor/github.com/urfave/cli/.gitignore", "vendor/github.com/urfave/cli/.travis.yml", "vendor/github.com/urfave/cli/CHANGELOG.md", "vendor/github.com/urfave/cli/CONTRIBUTING.md"], "title": "vendor: bump urfave/cli to v1.22.6\n\nThis finally fixes the regression of not allowing -1 as an argument,\nwhich is reported in https://github.com/urfave/cli/pull/1135.\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "b76b6b9338917bcdb258d512a582d613a477e58d", "time": "2022-04-07T18:08:59Z", "changed_files": ["libcontainer/rootfs_linux.go", "libcontainer/rootfs_linux_test.go"], "title": "Allow mounting of /proc/sys/kernel/ns_last_pid\n\nThe CAP_CHECKPOINT_RESTORE linux capability provides the ability to\nupdate /proc/sys/kernel/ns_last_pid. However, because this file is under\n/proc, and by default both K8s and CRI-O specify that /proc/sys should\nbe mounted as Read-Only, by default even with the capability specified,\na process will not be able to write to ns_last_pid.\n\nTo get around this, a pod author can specify a volume mount and a\nhostpath to bind-mount /proc/sys/kernel/ns_last_pid. However, runc does\nnot allow specifying mounts under /proc.\n\nThis commit adds /proc/sys/kernel/ns_last_pid to the validProcMounts\nstring array to enable a pod author to mount ns_last_pid as read-write.\nThe default remains unchanged; unless explicitly requested as a volume\nmount, ns_last_pid will remain read-only regardless of whether or not\nCAP_CHECKPOINT_RESTORE is specified.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>"}, {"sha": "ae6cb653f4250a9d4c2f190613241c85b5a1c125", "time": "2022-02-16T21:52:46Z", "changed_files": ["Makefile", "man/md2man-all.sh"], "title": "man/*sh: fix shellcheck warnings, add to shellcheck\n\nNow the only remaining file that needs shellcheck warnings to be fixed\nis bash-completion. Note that in Makefile's TODO.\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "5d1ef78cadaeb0708d9ea46c545c3e821517caaf", "time": "2022-02-16T21:35:50Z", "changed_files": ["script/check-config.sh"], "title": "script/check-config.sh: enable set -u, fix issues\n\nOne particularly bad one is ${codes[@]} which is fine in bash 4.4+,\nbut gives \"codes[@]: unbound variable\" with older bash versions,\nsuch as with bash 4.2 used on CentOS 6. It's good that this is the only\narray in the script that can potentially be empty.\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "d66498e7716732a478b40c8136a9fcf4642673fe", "time": "2022-02-16T21:26:53Z", "changed_files": ["Makefile", "script/check-config.sh"], "title": "script/check-config.sh: fix remaining shellcheck warnings\n\n... and add this file to shellcheck target in Makefile.\n\nThese:\n\n\tIn script/check-config.sh line 27:\n\tkernelMinor=\"${kernelVersion#$kernelMajor.}\"\n\t\t\t\t     ^----------^ SC2295 (info): Expansions inside ${..} need to be quoted separately, otherwise they match as patterns.\n\n\tDid you mean:\n\tkernelMinor=\"${kernelVersion#\"$kernelMajor\".}\"\n\n\tIn script/check-config.sh line 103:\n\t\tsource /etc/os-release 2>/dev/null || /bin/true\n\t\t       ^-------------^ SC1091 (info): Not following: /etc/os-release was not specified as input (see shellcheck -x).\n\n\tIn script/check-config.sh line 267:\n\t\tNET_CLS_CGROUP $netprio\n\t\t\t       ^------^ SC2206 (warning): Quote to prevent word splitting/globbing, or split robustly with mapfile or read -a.\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "baa06227a4ec49ae0354c6aa43f1bcf7f372001c", "time": "2022-02-16T21:25:27Z", "changed_files": ["script/check-config.sh"], "title": "script/check-config.sh: fix SC2166 warnings\n\nLike this one:\n\n\tIn ./script/check-config.sh line 215:\n\tif [ \"$kernelMajor\" -lt 5 ] || [ \"$kernelMajor\" -eq 5 -a \"$kernelMinor\" -le 1 ]; then\n\t\t\t\t\t\t\t      ^-- SC2166 (warning): Prefer [ p ] && [ q ] as [ p -a q ] is not well defined.\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "dc73d236eac7bd523e0bd3aa3fa38c2c7f3b7dec", "time": "2022-02-16T21:19:52Z", "changed_files": ["script/check-config.sh"], "title": "script/check-config.sh: fix wrap_color usage\n\n1. Allow wrap_bad and wrap_good to have an optional arguments.\n\n2. Remove unneeded echos; this fixes the shellcheck warnings like\n\n\tIn ./script/check-config.sh line 178:\n\t\t\techo \"$(wrap_bad 'cgroup hierarchy' 'nonexistent??')\"\n                             ^-- SC2005 (style): Useless echo? Instead of 'echo $(cmd)', just use 'cmd'.\n\n3. Fix missing color argument in calls to wrap_color (when printing the\n   hint about how to install apparmor).\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "6b16d0051fb29bb55ab9de2e989adb60c0a92622", "time": "2022-02-16T19:05:46Z", "changed_files": ["Makefile", "contrib/cmd/seccompagent/gen-seccomp-example-cfg.sh"], "title": "shfmt: add more files\n\n\u2026and fix a single format issue found.\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "d0c89dfac3d4892f35ba7ba4156a694d3cefcc06", "time": "2022-03-27T00:47:34Z", "changed_files": ["libcontainer/cgroups/utils.go"], "title": "libct/cg: IsCgroup2HybridMode: don't panic\n\nIn case statfs(\"/sys/fs/cgroup/unified\") fails with any error other\nthan ENOENT, current code panics. As IsCgroup2HybridMode is called from\nlibcontainer/cgroups/fs's init function, this means that any user of\nlibcontainer may panic during initialization, which is ugly.\n\nAvoid panicking; instead, do not enable hybrid hierarchy support and\nreport the error (under debug level, not to confuse anyone).\n\nBasically, replace the panic with \"turn off hybrid mode support\"\n(which makes total sense since we were unable to statfs its root).\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "d330f94b575037c6de69a0e3565c55096b7cf319", "time": "2022-02-08T03:07:16Z", "changed_files": ["tests/integration/update.bats"], "title": "tests/int/update.bats: fix extra reqs\n\nThis test requires both rootless and root, which does not make sense.\n\nRemove the rootless part.\n\nFixes: d41a273da\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "a2123baf63fd0f2a546f8061e9c23b086a49ec0b", "time": "2022-02-08T00:24:53Z", "changed_files": ["tests/integration/cgroups.bats", "tests/integration/helpers.bash", "tests/integration/update.bats"], "title": "tests/int: replace CGROUP_UNIFIED with CGROUP_V{1,2}\n\nThis makes it work similar to all the other variables we use as binary\nflags.\n\nThe new 'shellcheck disable' is due to a bug in shellcheck (basically,\nit does not track the scope of variables or execution order, assuming\neverything is executed as soon as it is seen).\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "6a3fe1618f5166e5c44f21714736049bac9c02cb", "time": "2022-02-11T03:53:38Z", "changed_files": ["libcontainer/README.md", "libcontainer/cgroups/manager/new.go", "libcontainer/factory_linux.go", "libcontainer/factory_linux_test.go", "libcontainer/integration/checkpoint_test.go", "libcontainer/integration/utils_test.go", "libcontainer/restored_process.go", "list.go", "utils_linux.go"], "title": "libcontainer: remove LinuxFactory\n\nSince LinuxFactory has become the means to specify containers state\ntop directory (aka --root), and is only used by two methods (Create\nand Load), it is easier to pass root to them directly.\n\nModify all the users and the docs accordingly.\n\nWhile at it, fix Create and Load docs (those that were originally moved\nfrom the Factory interface docs).\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "f309a69a48b67adaf51970abce683f0888e4ddc6", "time": "2022-03-22T00:03:09Z", "changed_files": ["README.md", "libcontainer/README.md"], "title": "README,libct/README: fix pkg.go.dev badges\n\nWhat used to be godoc.org is now pkg.go.dev, and while the old URLs\nstill work, they might be broken in the future.\n\nUpdated badges are generated via https://pkg.go.dev/badge/\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "48006d000706c2232fbb6dc7c1e493be41451159", "time": "2022-03-17T20:27:12Z", "changed_files": ["libcontainer/configs/validate/rootless.go", "libcontainer/configs/validate/rootless_test.go"], "title": "libct/configs/validate: rootlessEUIDMount: speedup\n\n1. Fix function docs. In particular, remove the part\n   which is not true (\"verifies that the user isn't trying to set up any\n   mounts they don't have the rights to do\"), and fix the part that\n   says \"that doesn't resolve to root\" (which is no longer true since\n   commit d8b669400adc).\n\n2. Replace fmt.Sscanf (which is slow and does lots of allocations)\n   with strings.TrimPrefix and strconv.Atoi.\n\n3. Add a benchmark for rootlessEUIDMount. Comparing the old and the new\n   implementations:\n\n\tname                 old time/op    new time/op    delta\n\tRootlessEUIDMount-4    1.01\u00b5s \u00b1 2%    0.16\u00b5s \u00b1 1%  -84.15%  (p=0.008 n=5+5)\n\n\tname                 old alloc/op   new alloc/op   delta\n\tRootlessEUIDMount-4      224B \u00b1 0%       80B \u00b1 0%  -64.29%  (p=0.008 n=5+5)\n\n\tname                 old allocs/op  new allocs/op  delta\n\tRootlessEUIDMount-4      7.00 \u00b1 0%      1.00 \u00b1 0%  -85.71%  (p=0.008 n=5+5)\n\nNote this code is already tested (in rootless_test.go).\n\nFixes: d8b669400adc\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "a99f82add1f2bf1e25ac0fecfdfb5eafa487ecc5", "time": "2022-03-15T10:00:49Z", "changed_files": ["tests/integration/seccomp-notify.bats"], "title": "tests: Add comment to clarify intent of seccomp-notify tests\n\nWhile doing the previous fix, I went over all the tests in this file and\nmade sure they were named correctly. This patch just adds a small\nsentence to clarify the intent, and does some minor improvements to some\nother test names.\n\nSigned-off-by: Rodrigo Campos <rodrigoca@microsoft.com>"}, {"sha": "728571c16fc05d2b823fdef59aba2bf69be409cf", "time": "2022-02-22T20:29:30Z", "changed_files": ["tests/integration/delete.bats"], "title": "tests/int: runc delete: fix flake, enable for rootless\n\nThe following failure was observed in CI (on centos-stream-8 in\nintegration-cgroup suite):\n\n\tnot ok 42 runc delete\n\t (from function `fail' in file tests/integration/helpers.bash, line 338,\n\t  in test file tests/integration/delete.bats, line 30)\n\t   `[ \"$output\" = \"\" ] || fail \"cgroup not cleaned up correctly: $output\"' failed\n\t....\n\tcgroup not cleaned up correctly: /sys/fs/cgroup/pids/system.slice/tmp-bats\\x2drun\\x2d68012-runc.IPOypI-state-testbusyboxdelete-runc.zriC8C.mount\n\t/sys/fs/cgroup/cpu,cpuacct/system.slice/tmp-bats\\x2drun\\x2d68012-runc.IPOypI-state-testbusyboxdelete-runc.zriC8C.mount\n\t...\n\nApparently, this is a cgroup systemd creates for a mount unit which\nappears then runc does internal /proc/self/exe bind-mount. The test\ncase should not take it into account.\n\nThe second problem with this test is it does not check that cgroup\nactually exists when the container is running (so checking that it\nwas removed after makes less sense). For example, in rootless mode\nthe cgroup might not have been created.\n\nFix the find arguments to look for a specific cgroup name, and add\na check that these arguments are correct (i.e. the cgroup is found\nwhen the container is running).\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "89733cd055f3094f97479ff8f7d65d759df855ab", "time": "2022-02-09T03:26:43Z", "changed_files": ["libcontainer/cgroups/ebpf/devicefilter/devicefilter_test.go", "libcontainer/process_linux.go", "update.go"], "title": "Format sources using gofumpt 0.2.1\n\n... which adds a wee more whitespace fixes.\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "1a935208410a353be149df7100b26c8490b14556", "time": "2022-01-28T02:16:34Z", "changed_files": ["libcontainer/cgroups/systemd/user.go"], "title": "libct/cg/sd: simplify DetectUserDbusSessionBusAddress\n\nApparently, \"systemctl --user --no-pager show-environment\" is useless\nwithout DBUS_SESSION_BUS_ADDRESS or XDG_RUNTIME_DIR set:\n\n\t$ echo $DBUS_SESSION_BUS_ADDRESS, $XDG_RUNTIME_DIR\n\tunix:path=/run/user/1000/bus, /run/user/1000\n\t$ systemctl --user --no-pager show-environment | grep DBUS_SESS\n\tDBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus\n\t$ unset DBUS_SESSION_BUS_ADDRESS\n\t$ systemctl --user --no-pager show-environment | grep DBUS_SESS\n\tDBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus\n\t$ unset XDG_RUNTIME_DIR\n\t$ systemctl --user --no-pager show-environment | grep DBUS_SESS\n\tFailed to connect to bus: $DBUS_SESSION_BUS_ADDRESS and $XDG_RUNTIME_DIR not defined (consider using --machine=<user>@.host --user to connect to bus of other user)\n\nSo, it does not make sense to try it to get the address.\n\nAlso, it does not make sense to suggest  \"systemctl --user start dbus\"\neither, for the same reason, so remove that suggestion from the error\nmessage text.\n\nSince DBUS_SESSION_BUS_ADDRESS environment variable, on which the code\nrelies, is et by dbus-run-session (or dbus-launch, or something similar\nthat is supposed to be run during the login process), add a suggestion\nto re-login.\n\nFinally, fix the following linter warning:\n\n> error-strings: error strings should not be capitalized or end with punctuation or a newline (revive)\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "11895cd087b64e47f69fb01828c5206427e3049a", "time": "2022-02-01T21:45:58Z", "changed_files": ["libcontainer/cgroups/systemd/user.go"], "title": "libct/cg/sd: escape dbus address value\n\nD-Bus specification [1] requires that the values in server address need\nto be escaped in a special way, and other clients perform the needed\nescaping (e.g. systemd [2] does that, as well as recent godbus [3]).\n\nMore to say, it is important to perform such escaping, since if dbus\nsees a character that should have been escaped but it's not, it returns\nan error [4].\n\nFix tryDiscoverDbusSessionBusAddress to use dbus.EscapeBusAddressValue\nfunction, recently added to godbus [3].\n\n[1] https://dbus.freedesktop.org/doc/dbus-specification.html#addresses\n[2] https://github.com/systemd/systemd/blob/5efbd0bf897a990ebe43d7dc69141d87c404ac9a/src/libsystemd/sd-bus/bus-internal.c#L294-L318\n[3] https://github.com/godbus/dbus/pull/302\n[4] https://gitlab.freedesktop.org/dbus/dbus/-/blob/37b76d13738e782fe2eb12abdd0179745c0b3f81/dbus/dbus-address.c#L330\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "38c21694ba8b3873c9d3792a19e0e4fcd46a887c", "time": "2022-02-07T18:29:45Z", "changed_files": ["tests/integration/helpers.bash"], "title": "tests/integration/helpers: set -u\n\nThis is a way to prevent the code doing something really bad when a\nvariable it uses is not set. Good to have since it helps to catch some\nlogical errors etc.\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "c8c3e8526d4e0a81f037f182186c5a1c64a5ff5f", "time": "2022-02-07T18:07:43Z", "changed_files": ["tests/integration/cgroups.bats", "tests/integration/checkpoint.bats", "tests/integration/cwd.bats", "tests/integration/helpers.bash", "tests/integration/hooks.bats", "tests/integration/update.bats", "tests/rootless.sh"], "title": "tests: fix checks for non-existent variables\n\nAudit all checks for non-empty variables (i.e. ' -z ', ' -n ',\n' != \"\"' and '= \"\"'), and fix those cases where a variable might be\nunset. Those variables (that might not be set) are\n\n - RUNC_USE_SYSTEMD\n - BATS_RUN_TMPDIR\n - AUX_UID\n - AUX_DIR\n - SD_PARENT_NAME\n - REL_PARENT_PATH\n - ROOT\n - HAVE_CRIU\n - ROOTLESS_FEATURES\n - and a few test-specific or file-specific variables\n\nThis should allow us to enable set -u.\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "99d5c0231fff54657f890b3eb9ffe50ff3133db6", "time": "2022-03-01T02:33:43Z", "changed_files": ["tests/integration/list.bats", "tests/integration/root.bats"], "title": "tests/int/{root,list}.bats: ALT_ROOT fixups in teardown\n\n1. Add \"unset ALT_ROOT\" since it should not be used after teardown is\n   called.\n\n2. Remove \"rm -rf $ALT_ROOT\". It is not needed, because ALT_ROOT is a\n   subdirectory of ROOT, which is removed in teardown_bundle.\n\n3. Checking for ALT_ROOT being non-empty is a leftover from the era when\n   teardown() was called as the first step from setup(). Since commit\n   41670e21f0f36390ee9cb this is no longer the case, so the condition\n   is no longer needed (plus, the `set -u` which is about to be added\n   should catch any possible use of unset ALT_ROOT).\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "7da77d802e5734b76b8bd7d9a76c51690de8e3b4", "time": "2022-02-09T00:09:31Z", "changed_files": ["tests/integration/help.bats", "tests/integration/helpers.bash"], "title": "tests/int: don't add --root if $ROOT is not set\n\nSome tests (those in help.bats and version.bats) do not use setup_bundle\n(as they do not need to start any containers), and thus they do not set\n$ROOT. As a consequence, these tests now call \"runc --root /state\" which\nis not nice.\n\nMake adding --root conditional (only if $ROOT is set).\n\nAmazingly, this change breaks help.bats tests under rootless, because\n\"sudo rootless\" does not change the value of XDG_RUNTIME_DIR which still\npoints to root-owned directory, and as a result we have this:\n\n> runc foo -h (status=1):\n> the path in $XDG_RUNTIME_DIR must be writable by the user\n> time=\"2022-02-08T07:04:57Z\" level=error msg=\"mkdir /run/user/0/runc: permission denied\"\n\nThis could be fixed by adding proper $ROOT, but it's easier just to skip\nthose tests under non-root.\n\nNOTE that version.bats is not broken because -v is handled by urfave/cli\nvery early, so app.Before function is not run.\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "9e2a0463e55b85af85b29cca6f534c9d7a15633a", "time": "2022-02-07T17:44:27Z", "changed_files": ["tests/integration/helpers.bash"], "title": "tests/int: fix runc_spec for set -u\n\nOlder bash versions treats variable as unset if nothing has been\nassigned to it. Here is an example from CentOS 7 system:\n\n\t[kir@localhost ~]$ bash -u -c 'x() { local args=(); echo \"${args[@]}\"; }; x'\n\tbash: args[@]: unbound variable\n\t[kir@localhost ~]$ echo $BASH_VERSION\n\t4.2.46(2)-release\n\nRewrite to work around this.\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "8c04b981005361daaa8a4f58e4ca7448b5459250", "time": "2022-02-21T18:34:27Z", "changed_files": ["libcontainer/cgroups/systemd/v2.go"], "title": "libct/cg/sd/v2: fix ENOENT on cgroup delegation\n\nApparently, not all files listed in /sys/kernel/cgroup/delegate must\nexist in every cgroup, so we should ignore ENOENT.\n\nDot not ignore ENOENT on the directory itself though.\n\nChange cgroupFilesToChown to not return \".\", and refactor it to not do\nany dynamic slice appending in case we're using the default built-in\nlist of files.\n\nFixes: 35d20c4e0\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "d1fca8e599837a694ea4e9a6892b018456e6e1ae", "time": "2022-02-11T02:58:08Z", "changed_files": ["list.go"], "title": "list: report error when non-existent --root is specified\n\nIt is questionable whether runc list should return an empty list of\ncontainers when non-existent --root is specified or not.\n\nThe current behavior is the directory is always created and then the\nempty list of container is shown.\n\nTo my mind, specifying a non-existent root is an error and should be\nreported as such. This is what this patch does.\n\nFor backward compatibility, if --root is not set (i.e. a default is\nused), ENOENT is not reported.\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "2b07e751b5f982ed05629cdcab2d9ab87a68abff", "time": "2022-02-11T21:18:56Z", "changed_files": ["utils.go"], "title": "reviseRootDir: skip default values, add validation\n\n1. In case --root option is not provided, do nothing.\n\n2. Instead of checking if root value is empty string, check it after\n   filepath.Abs, and reject \"/\". Improve docstring while at it.\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "eb2f08dc4e68d794ec80c8d867d953b3f7660b67", "time": "2022-02-11T02:52:08Z", "changed_files": ["checkpoint.go", "list.go", "restore.go"], "title": "checkpoint,restore,list: don't call fatal\n\nThere is a mix of styles when handling CLI commands. In most cases we\nreturn an error, which is handled from app.Run in main.go (it calls\nfatal if there is an error).\n\nIn a few cases, though, we call fatal(err) from random places.\n\nLet's be consistent and always return an error. The only exception is\nrunc exec, which needs to exit with a particular exit code.\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "0b74e49d4837e3f0a9948ee34ff9a6e3e242ce8b", "time": "2022-02-07T23:22:17Z", "changed_files": ["signals.go"], "title": "runc run/exec: ignore SIGURG\n\nForeground runc exec and runc run forwards all the signals (that it can)\nto the process being run.\n\nSince Go 1.14, go runtime uses SIGURG for async preemptive scheduling.\nThis means that runc regularly receives SIGURG and, in case of\nforeground runc run/exec, it gets forwarded to the container process.\n\nFor example:\n\n[kir@kir-rhat runc]$ sudo ./runc --debug exec xx67 sleep 1m\n...\nDEBU[0000] child process in init()\nDEBU[0000] setns_init: about to exec\nDEBU[0000]signals.go:102 main.(*signalHandler).forward() sending signal to process urgent I/O condition\nDEBU[0000]signals.go:102 main.(*signalHandler).forward() sending signal to process urgent I/O condition\nDEBU[0000]signals.go:102 main.(*signalHandler).forward() sending signal to process urgent I/O condition\n...\n\nOr, with slightly better debug messages from commit 58c1ff39a549636621d:\n\nDEBU[0000]signals.go:102 main.(*signalHandler).forward() forwarding SIGURG to 819784\nDEBU[0000]signals.go:102 main.(*signalHandler).forward() forwarding SIGURG to 819784\n\nObviously, this signal is an internal implementation detail of Go\nruntime, and should not be forwarded to the container process.\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "376c988618108040679ee9413353e0da07fae404", "time": "2022-02-01T19:44:12Z", "changed_files": ["libcontainer/specconv/spec_linux.go"], "title": "libct/specconv: improve checkPropertyName\n\nCommit 029b73c1b replaced a regular expression with code checking the\ncharacters. Despite what the comment said about ASCII, the check was\nperformed rune by rune, not byte by byte.\n\nNote the check was still correct, basically comparing int32's, but the\nbyte by byte way is a tad faster and more straightforward. The change\nalso fixes the issue of a misleading comment.\n\nBenchmark before/after shows a modest improvement:\n\nname                 old time/op    new time/op    delta\nCheckPropertyName-4     164ns \u00b1 2%     123ns \u00b1 2%  -24.73%  (p=0.029 n=4+4)\n\nname                 old alloc/op   new alloc/op   delta\nCheckPropertyName-4     96.0B \u00b1 0%     64.0B \u00b1 0%  -33.33%  (p=0.029 n=4+4)\n\nname                 old allocs/op  new allocs/op  delta\nCheckPropertyName-4      6.00 \u00b1 0%      4.00 \u00b1 0%  -33.33%  (p=0.029 n=4+4)\n\nFixes: 029b73c1b\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "58c1ff39a549636621de02ac32eb4a40d7665047", "time": "2022-01-31T19:44:48Z", "changed_files": ["signals.go"], "title": "signals: fix signal name debug print\n\nHere's how it looks now:\n\n$ runc --debug exec ctid sleep 1h\n...\nDEBU[0000]signals.go:102 main.(*signalHandler).forward() sending signal to process urgent I/O condition\nDEBU[0000]signals.go:102 main.(*signalHandler).forward() sending signal to process urgent I/O condition\nDEBU[0022]signals.go:102 main.(*signalHandler).forward() sending signal to process terminated\nDEBU[0022]signals.go:102 main.(*signalHandler).forward() sending signal to process urgent I/O condition\n\nThis is obviously not very readable.\n\nUse unix.SignalName, plus a numeric representation of the signal, since\nSignalName does not know all signals.\n\nAdd PID while we're at it.\n\nWith this commit:\n\nDEBU[0000]signals.go:103 main.(*signalHandler).forward() forwarding signal 23 (SIGURG) to 891345\nDEBU[0020]signals.go:103 main.(*signalHandler).forward() forwarding signal 45 () to 891345\nDEBU[0020]signals.go:103 main.(*signalHandler).forward() forwarding signal 23 (SIGURG) to 891345\nDEBU[0020]signals.go:103 main.(*signalHandler).forward() forwarding signal 23 (SIGURG) to 891345\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "18e286261ec6e94bb9ccaee2bbc91fc63bf08f89", "time": "2022-01-20T00:05:30Z", "changed_files": ["CHANGELOG.md", "libcontainer/nsenter/cloned_binary.c"], "title": "libct/nsenter: fix extra runc re-exec on tmpfs\n\nAfter adding some debug info to cloned_binary.c I found out that\nis_self_cloned() is not working right when runc binary is on tmpfs,\nresulting in one extra re-exec of runc.\n\nWith some added debug:\n\n\t$ mkdir bin\n\t$ sudo mount -t tmpfs tmp bin\n\t$ sudo cp runc bin\n\t$ sudo ./bin/runc --debug exec xxx true\n\tDEBU[0000] nsexec[763590]: => is_self_cloned\n\tDEBU[0000] nsexec[763590]: got seals 1 (want 15)\n\tDEBU[0000] nsexec[763590]: <= is_self_cloned, is_cloned = 0\n\tDEBU[0000] nsexec[763590]: try_bindfd: 5\n\tDEBU[0000] nsexec[763590]: re-exec itself...\n\tDEBU[0000] nsexec[763590]: => is_self_cloned\n\tDEBU[0000] nsexec[763590]: got seals 1 (want 15)\n\tDEBU[0000] nsexec[763590]: <= is_self_cloned, is_cloned = 0\n\tDEBU[0000] nsexec[763590]: try_bindfd: -1\n\tDEBU[0000] nsexec[763590]: fallback to make_execfd: 5\n\tDEBU[0000] nsexec[763590]: re-exec itself...\n\tDEBU[0000] nsexec[763590]: => is_self_cloned\n\tDEBU[0000] nsexec[763590]: got seals 15 (want 15)\n\tDEBU[0000] nsexec[763590]: <= is_self_cloned, is_cloned = 1\n\nFrom the above, it is seen that\n - `is_self_cloned` returns 0,\n - `try_bindfd` is called and succeeds,\n - runc re-execs itself,\n - the second call to `is_self_cloned` returns 0 again (because GET_SEALS returns 1),\n - runc falls back to `make_execfd`, and re-execs again,\n - finally, the third `is_self_cloned` returns 1.\n\nI guess that the code relied on the following (quoting fcntl(2)):\n\n> Currently, file seals can be applied only to a file descriptor\n> returned by memfd_create(2) (if the MFD_ALLOW_SEALING was employed).\n> On other filesystems, all fcntl() operations that operate on seals\n> will return EINVAL.\n\nIt looks like in case of a file on tmpfs it returns 1 (F_SEAL_SEAL).\n\nWith the fix:\n\n\tDEBU[0000] nsexec[768367]: => is_self_cloned\n\tDEBU[0000] nsexec[768367]: got seals 1 (want 15)\n\tDEBU[0000] nsexec[768367]: no CLONED_BINARY_ENV\n\tDEBU[0000] nsexec[768367]: <= is_self_cloned, is_cloned = 0\n\tDEBU[0000] nsexec[768367]: try_bindfd: 5\n\tDEBU[0000] nsexec[768367]: re-exec itself...\n\tDEBU[0000] nsexec[768367]: => is_self_cloned\n\tDEBU[0000] nsexec[768367]: got seals 1 (want 15)\n\tDEBU[0000] nsexec[768367]: fstatfs says ro = 1\n\tDEBU[0000] nsexec[768367]: fstat says nlink = 1\n\tDEBU[0000] nsexec[768367]: <= is_self_cloned, is_cloned = 1\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "485e6c84e7ef783c126c392af072a974c9fb88ce", "time": "2022-01-27T03:13:15Z", "changed_files": ["libcontainer/factory_linux.go", "libcontainer/init_linux.go", "notify_socket.go"], "title": "Fix some revive warnings\n\nThis is needed since the future commits will touch this code, and then\nthe lint-extra CI job complains.\n\n> libcontainer/factory.go#L245\n> var-naming: var fdsJson should be fdsJSON (revive)\n\nand\n\n> libcontainer/init_linux.go#L181\n> error-strings: error strings should not be capitalized or end with punctuation or a newline (revive)\n\nand\n\n> notify_socket.go#L94\n> receiver-naming: receiver name n should be consistent with previous receiver name s for notifySocket (revive)\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "1a3ee4966ce58abd243cb6aeb55fb561dca31a56", "time": "2022-01-25T23:33:25Z", "changed_files": ["list.go"], "title": "list: use Info(), fix race with delete\n\nSince commit 551629417 we can (and should) use Info() to get access to\nfile stat. Do this.\n\nWhile going over directory entries, a parallel runc delete can remove\nan entry, and with the current code it results in a fatal error (which\nwas not observed in practice, but looks quite possible). To fix,\nadd a special case to continue on ErrNotExist.\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "146c8c0c62dc30a08eb5ff302217d91dfd29d158", "time": "2022-01-22T01:53:03Z", "changed_files": ["libcontainer/init_linux.go"], "title": "libct: fixStdioPermissions: ignore EROFS\n\nIn case of a read-only /dev, it's better to move on and let whatever is\nrun in a container to handle any possible errors.\n\nThis solves runc exec for a user with read-only /dev.\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "18c4760aeda1ecade2711c246d092fad2568eb90", "time": "2022-01-22T01:43:09Z", "changed_files": ["libcontainer/init_linux.go"], "title": "libct: fixStdioPermissions: skip chown if not needed\n\nSince we already called fstat, we know the current file uid. In case it\nis the same as the one we want it to be, there's no point in trying\nchown.\n\nRemove the specific /dev/null check, as the above also covers it\n(comparing /dev/null uid with itself is true).\n\nThis also fixes runc exec with read-only /dev for root user.\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "b7fdb688483a628a1484248ff5b7f4c559f17950", "time": "2022-01-22T01:35:52Z", "changed_files": ["libcontainer/init_linux.go"], "title": "libct: fixStdioPermissions: minor refactoring\n\nUse os/file Chown method instead of bare unix.Fchown as it already have\naccess to underlying fd, and produces nice-looking errors. This allows\nus to remove our error wrapping and some linter annotations.\n\nWe still use unix.Fstat since os.Stat access to os-specific fields\nlike uid/gid is not very straightforward. The only change here is to use\nfile name (rather than fd) in the error text.\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "c0e300f10911e03abf339bc2a916824ac86ae70a", "time": "2022-01-04T23:43:14Z", "changed_files": ["libcontainer/nsenter/nsenter_unsupported.go"], "title": "Refuse to build runc without nsenter\n\nCommit 4d1d6185abda6a5d43eac75f77242488b81f8937 added this\nnsenter_unsupported.go file in order for nsenter to be a valid (but\nempty, non-functional) Go package on unsupported platforms.\n\nAs a result, runc can be build successfully without CGO, which results\nin a non-working and hard-to-debug binary (see issue 3330).\n\nAs the functionality of being able to compile a package which is\ndefinitely not working is questionable, and I can't think of any use\ncases, let's remove the file.\n\nWith this, runc can no longer be build without CGO:\n\n\t[kir@kir-rhat runc]$ CGO_ENABLED=0 make runc\n\tgo build -trimpath \"-buildmode=pie\"  -tags \"seccomp\" -ldflags \"-X main.gitCommit=v1.0.0-452-g00f56786-dirty -X main.version=1.1.0-rc.1+dev \" -o runc .\n\tgo build github.com/opencontainers/runc/libcontainer/nsenter: build constraints exclude all Go files in /home/kir/go/src/github.com/opencontainers/runc/libcontainer/nsenter\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "907aefd43cd91d4452ca79f0aea8b6ae594c6e95", "time": "2021-12-16T01:00:06Z", "changed_files": ["libcontainer/factory_linux.go"], "title": "libct: StartInitialization: fix %w related warning\n\n(on Go 1.18 this is actually an error)\n\n> libcontainer/factory_linux.go:341:10: fmt.Errorf format %w has arg e of wrong type interface{}\n\nUnfortunately, fixing it results in an errorlint warning:\n\n> libcontainer/factory_linux.go#L344 non-wrapping format verb for fmt.Errorf. Use `%w` to format errors (errorlint)\n\nso we have to silence that one.\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "6d2067a4bf1ae0a9ae1c570a0d1f2004e80eb229", "time": "2021-12-09T08:54:48Z", "changed_files": ["script/seccomp.sh"], "title": "script/seccomp.sh: fix argc check\n\nThis check was always broken, and it slipped through the cracks because\nwe never run it without additional architectures now.\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "457ca62f1f51c15aa909d56e28466373f40c13b6", "time": "2021-12-09T08:51:07Z", "changed_files": ["script/release_build.sh", "script/release_sign.sh"], "title": "script/release_*.sh: fix usage\n\n- release_build: fix -H <hash_cmd> option (was -h)\n- release_sign: add -H and -S options\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "520702dac5130f3fd07153cb113e05ddb63ac76e", "time": "2021-11-29T10:34:31Z", "changed_files": ["features.go", "libcontainer/capabilities/capabilities.go", "libcontainer/configs/config.go", "libcontainer/seccomp/config.go", "libcontainer/seccomp/seccomp_linux.go", "libcontainer/seccomp/seccomp_unsupported.go", "libcontainer/specconv/spec_linux.go", "main.go", "types/features/features.go"], "title": "Add `runc features` command\n\nFix issue 3274\n\nSee `types/features/features.go`.\n\nSigned-off-by: Akihiro Suda <akihiro.suda.cz@hco.ntt.co.jp>"}, {"sha": "06b3fd9d19aa79b57b55e614ad747d3cc6cd914d", "time": "2021-11-30T03:52:28Z", "changed_files": ["libcontainer/cgroups/ebpf/devicefilter/devicefilter.go"], "title": "libct/cg/ebpf: drop finalize return value\n\nIt never returns any error, so let's drop it (in case it needs to be\nre-added, it is easy to do so).\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "86733013cc0d60b93f5534b47326d2ad098e6d94", "time": "2021-11-30T03:48:03Z", "changed_files": ["notify_socket.go", "utils_linux.go"], "title": "notify_socket: setupSpec: drop ctx arg and return value\n\nThose were never used (ctx was added by the initial commit, and\nerror was added by commit 25fd4a6757199).\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "e63186351b6eb9830c10a91b74e5ae54d9048859", "time": "2021-11-30T03:35:19Z", "changed_files": ["tty.go", "utils_linux.go"], "title": "tty: rm inheritStdio return value\n\nSince commit eebdb644f924 this function never returns any error.\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "d23b8109279efdd60bc9a7afc03bcad7c0c378f2", "time": "2021-11-30T03:31:01Z", "changed_files": ["checkpoint.go", "utils_linux.go"], "title": "checkpoint: rm getDefaultImagePath arg\n\nIt was never used.\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}, {"sha": "dd1404014538fe063c8377d8d834859c8ec04aea", "time": "2021-11-30T03:28:24Z", "changed_files": ["libcontainer/init_linux.go"], "title": "libct: fixStdioPermissions: rm config arg\n\nSince commit ff5075c33fd42 it is no longer used.\n\nSigned-off-by: Kir Kolyshkin <kolyshkin@gmail.com>"}]